generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  slug            String            @unique(map: "slug") @db.VarChar(100)
  post_categories post_categories[]
}

model post_categories {
  post_id     Int
  category_id Int
  posts       posts      @relation(fields: [post_id], references: [id], onUpdate: Restrict, map: "post_categories_ibfk_1")
  categories  categories @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "post_categories_ibfk_2")

  @@id([post_id, category_id])
  @@index([category_id], map: "category_id")
}

model post_meta {
  id         Int     @id @default(autoincrement())
  post_id    Int
  meta_key   String? @db.VarChar(255)
  meta_value String? @db.Text
  posts      posts   @relation(fields: [post_id], references: [id], onUpdate: Restrict, map: "post_meta_ibfk_1")

  @@index([post_id], map: "post_id")
}

model post_tags {
  post_id Int
  tag_id  Int
  posts   posts @relation(fields: [post_id], references: [id], onUpdate: Restrict, map: "post_tags_ibfk_1")
  tags    tags  @relation(fields: [tag_id], references: [id], onUpdate: Restrict, map: "post_tags_ibfk_2")

  @@id([post_id, tag_id])
  @@index([tag_id], map: "tag_id")
}

model posts {
  id              Int               @id @default(autoincrement())
  author_id       Int
  title           String            @db.VarChar(255)
  slug            String            @unique(map: "slug") @db.VarChar(255)
  summary         String?           @db.Text
  created_at      DateTime?         @default(now()) @db.DateTime(0)
  updated_at      DateTime?         @default(now()) @db.DateTime(0)
  post_categories post_categories[]
  post_meta       post_meta[]
  post_tags       post_tags[]
  users           users             @relation(fields: [author_id], references: [id], onUpdate: Restrict, map: "posts_ibfk_1")

  @@index([author_id], map: "author_id")
}

model tags {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  slug      String      @unique(map: "slug") @db.VarChar(100)
  post_tags post_tags[]
}

model users {
  id            Int       @id @default(autoincrement())
  first_name    String    @db.VarChar(100)
  last_name     String    @db.VarChar(100)
  email         String    @unique(map: "email") @db.VarChar(255)
  password_hash String    @db.VarChar(255)
  registered_at DateTime? @default(now()) @db.DateTime(0)
  posts         posts[]
}
